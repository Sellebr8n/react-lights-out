{"ast":null,"code":"import _toConsumableArray from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nRows: number of rows of board\n * - nCols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.makeBoard = _this.makeBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var _this$props = this.props,\n          nRows = _this$props.nRows,\n          nCols = _this$props.nCols; // TODO: create array-of-arrays of true/false values\n\n      for (var r = 0; r < nRows; r++) {\n        var row = [];\n\n        for (var c = 0; c < nCols; c++) {\n          row.push(Math.floor(Math.random() * 2) ? true : false);\n        }\n\n        board.push(row);\n      } // console.log(board);\n\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var nCols = coord.nCols,\n          nRows = coord.nRows;\n      var board = this.state.board; // let [y, x] = coord.split(\"-\").map(Number);\n\n      var c = {\n        a: {\n          col: nCols,\n          row: nRows\n        },\n        n: {\n          col: nCols,\n          row: nRows - 1 < 0 && nRows\n        },\n        s: {\n          col: nCols,\n          row: nRows + 1\n        },\n        e: {\n          col: nCols + 1,\n          row: nRows\n        },\n        w: {\n          col: nCols - 1,\n          row: nRows\n        }\n      };\n      console.log(c.a, c.n, c.e, c.w, c.s);\n      checkFlip(nCols, nRows, this.props); // console.log(isWinner());\n\n      function checkFlip(col, row, props) {\n        if (col >= 0 && col < props.nCols && row >= 0 && row < props.nRows) {\n          board[row][col] = !board[row][col];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      function isWinner() {\n        return _toConsumableArray(board).flat().every(function (c) {\n          return !c;\n        });\n      }\n\n      this.setState({\n        board: board,\n        hasWon: isWinner()\n      }); // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"makeBoard\",\n    value: function makeBoard() {\n      var _this2 = this;\n\n      var board = this.state.board.map(function (row, ri) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: \"Row-\".concat(ri),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 14\n          }\n        }, row.map(function (c, ci) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(ri, \"-\").concat(ci),\n            isLit: _this2.state.board[ri][ci],\n            flipCellsAroundMe: _this2.flipCellsAround,\n            nCols: ci,\n            nRows: ri,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 18\n            }\n          });\n        }));\n      });\n      return board;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }, this.makeBoard()));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: \"float\"\n};\nexport default Board;","map":{"version":3,"sources":["/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","makeBoard","bind","flipCellsAround","nRows","nCols","r","row","c","push","Math","floor","random","coord","a","col","n","s","e","w","console","log","checkFlip","isWinner","flat","every","setState","map","ri","ci","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nRows: number of rows of board\n * - nCols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: \"float\"\n  }\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.makeBoard = this.makeBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    let { nRows, nCols } = this.props\n    // TODO: create array-of-arrays of true/false values\n    for (let r = 0 ; r < nRows ; r++ ){\n      let row = []\n      for (let c = 0 ; c < nCols ; c++ ){\n        row.push(Math.floor(Math.random() * 2) ? true : false)\n      }\n      board.push(row)\n    }\n    // console.log(board);\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) { \n    let {nCols, nRows} = coord;\n    let {board} = this.state;\n    // let [y, x] = coord.split(\"-\").map(Number);\n\n    let c = {\n      a: {\n        col: nCols,\n        row: nRows\n      },\n      n: {\n        col: nCols,\n        row: nRows -1 < 0 && nRows\n      },\n      s: {\n        col: nCols,\n        row: nRows +1\n      },\n      e: {\n        col: nCols +1,\n        row: nRows \n      },\n      w: {\n        col: nCols -1,\n        row: nRows\n      }\n    }\n    console.log(c.a, c.n, c.e, c.w, c.s );\n\n    checkFlip(nCols, nRows, this.props)\n    // console.log(isWinner());\n\n    function checkFlip(col, row, props){\n      if ((col >= 0 && col < props.nCols) && (row >= 0 && row < props.nRows)){\n        board[row][col] = !board[row][col];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    function isWinner(){\n      return [...board].flat().every(c => !c)\n    }\n\n    this.setState({board, hasWon: isWinner()});\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n  makeBoard(){\n    let board = this.state.board.map((row, ri) => {\n      return <tr key={`Row-${ri}`}>\n        {row.map((c, ci) => {\n          return <Cell \n                    key={`${ri}-${ci}`} \n                    isLit={this.state.board[ri][ci]} \n                    flipCellsAroundMe={this.flipCellsAround}\n                    nCols={ci}\n                    nRows={ri}\n                  />\n        })}\n      </tr>\n    })\n    return board\n  }\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    \n    // TODO\n    return (\n      <table className=\"Board\">\n        <tbody>\n          { this.makeBoard() }\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}