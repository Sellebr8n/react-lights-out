{"ast":null,"code":"import _slicedToArray from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nRows: number of rows of board\n * - nCols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.makeBoard = _this.makeBoard.bind();\n    return _this;\n  }\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var _this$props = this.props,\n          nRows = _this$props.nRows,\n          nCols = _this$props.nCols; // TODO: create array-of-arrays of true/false values\n\n      for (var r = 0; r < nRows; r++) {\n        var row = [];\n\n        for (var c = 0; c < nCols; c++) {\n          row.push(Math.floor(Math.random() * 2) ? true : false);\n        }\n\n        board.push(row);\n      }\n\n      console.log(board);\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          nCols = _this$props2.nCols,\n          nRows = _this$props2.nRows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"makeBoard\",\n    value: function makeBoard() {\n      var _this2 = this;\n\n      this.state.board.map(function (row, ri) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 14\n          }\n        }, row.map(function (c, ci) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(ri, \"-\").concat(ci),\n            isLit: _this2.state.board[ri][ci],\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 20\n            }\n          });\n        }));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: \"float\"\n};\nexport default Board;","map":{"version":3,"sources":["/Users/ludvigsellebraten/Desktop/Devs/React_Bootcamp/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","makeBoard","bind","nRows","nCols","r","row","c","push","Math","floor","random","console","log","coord","split","map","Number","y","x","flipCell","ri","ci","defaultProps","chanceLightStartsOn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAEjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAIA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,EAAjB;AAPiB;AAQlB;AAED;;;;;kCACc;AACZ,UAAIH,KAAK,GAAG,EAAZ;AADY,wBAEW,KAAKH,KAFhB;AAAA,UAENO,KAFM,eAENA,KAFM;AAAA,UAECC,KAFD,eAECA,KAFD,EAGZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGF,KAArB,EAA6BE,CAAC,EAA9B,EAAkC;AAChC,YAAIC,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGH,KAArB,EAA6BG,CAAC,EAA9B,EAAmC;AACjCD,UAAAA,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,IAAhC,GAAuC,KAAhD;AACD;;AACDZ,QAAAA,KAAK,CAACS,IAAN,CAAWF,GAAX;AACD;;AACDM,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACA,aAAOA,KAAP;AACD;AAED;;;;oCACgBe,K,EAAO;AAAA,yBACA,KAAKlB,KADL;AAAA,UAChBQ,KADgB,gBAChBA,KADgB;AAAA,UACTD,KADS,gBACTA,KADS;AAErB,UAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRe,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGf,KAAd,IAAuBc,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGf,KAAzC,EAAgD;AAC9CJ,UAAAA,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACpB,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;gCACW;AAAA;;AACT,WAAKtB,KAAL,CAAWE,KAAX,CAAiBiB,GAAjB,CAAqB,UAACV,GAAD,EAAMe,EAAN,EAAa;AAChC,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACJf,GAAG,CAACU,GAAJ,CAAQ,UAACT,CAAD,EAAIe,EAAJ,EAAW;AAChB,8BAAO,oBAAC,IAAD;AAAM,YAAA,GAAG,YAAMD,EAAN,cAAYC,EAAZ,CAAT;AAA2B,YAAA,KAAK,EAAE,MAAI,CAACzB,KAAL,CAAWE,KAAX,CAAiBsB,EAAjB,EAAqBC,EAArB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,SAFA,CADI,CAAP;AAKD,OAND;AAOD;;;6BAEQ;AAEP;AAEA;AAEA;AAEA;AACA,0BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAeD;;;;EA3FiB7B,S;;AAAdE,K,CACG4B,Y,GAAe;AACpBpB,EAAAA,KAAK,EAAE,CADa;AAEpBC,EAAAA,KAAK,EAAE,CAFa;AAGpBoB,EAAAA,mBAAmB,EAAE;AAHD,C;AA8FxB,eAAe7B,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nRows: number of rows of board\n * - nCols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: \"float\"\n  }\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.makeBoard = this.makeBoard.bind();\n  }\n\n  /** create a board nRows high/nCols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    let { nRows, nCols } = this.props\n    // TODO: create array-of-arrays of true/false values\n    for (let r = 0 ; r < nRows ; r++ ){\n      let row = []\n      for (let c = 0 ; c < nCols ; c ++ ){\n        row.push(Math.floor(Math.random() * 2) ? true : false)\n      }\n      board.push(row)\n    }\n    console.log(board);\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n  makeBoard(){\n    this.state.board.map((row, ri) => {\n      return <tr>\n        {row.map((c, ci) => {\n            return <Cell key={ `${ri}-${ci}`} isLit={this.state.board[ri][ci]} />\n        })}\n      </tr>\n    })\n  }\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    \n    // TODO\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {\n          //  this.state.board.map((row, ri) => {\n          //   return <tr>\n          //     {row.map((c, ci) => {\n          //         return <Cell key={ `${ri}-${ci}`} isLit={this.state.board[ri][ci]} />\n          //     })}\n          //   </tr>\n          // }) \n          }\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}